{% template gluck %}
{% assign chart_id = "chart-gluck-" | append_random %}
<script src="https://cdn.jsdelivr.net/npm/chartkick@5.0.1/dist/chartkick.min.js"></script>
<script src="https://usetrmnl.com/js/highcharts/12.3.0/highcharts.js"></script>
<div class="view">
  <div class="layout layout--col gap--space-between">
    <div id="{{chart_id}}" style="width: 100%; height: 100%"></div>
  </div>

  <div class="title_bar">
    <img class="image" src="https://avatars.githubusercontent.com/u/7661012?s=200" style="background:white" />
    <span class="title">{{ trmnl.plugin_settings.custom_fields_values.USER }}: <span id="{{chart_id}}-last"></span> <span id="{{chart_id}}-dir"></span> <span id="{{chart_id}}-units"></span></span>
    <span class="instance">{{ status[0].now | divided_by: 1000 | plus: trmnl.user.utc_offset | date: "%H:%M"  }}</span>
  </div>
</div>

<script>
  var nowTimestamp = {{ status[0].now | plus: trmnl.user.utc_offset | times: 1000 }};
  var createChartGluck = function() {
    const setupMmol = {
      lines: [3.9, 7.8, 10.0],
      unit: "mmol/L",
      cvt: (x)=>x ? (Math.round((x / 18) * 10) / 10) : x,
    };
    const setupMgdl = {
      lines: [70, 140, 180],
      unit: "mg/dL",
      cvt: (x)=>x,
    };
    const dir = {
      "Flat": "⮕",
      "SingleUp": "⬆",
      "SingleDown": "⬇",
      "FortyFiveUp": "⬈",
      "FortyDiveDown": "⬊",
      "DoubleUp": "⬆⬆",
      "DoubleDown": "⬇⬇",
    };

    const config = {{trmnl.plugin_settings | json}};
    const bgs = {{bgs | json}};
    const setup = config.custom_fields_values.UNITS == "mmol" ? setupMmol : setupMgdl;
    const data = bgs.map((x)=>[x.datetime, setup.cvt(x.sgv)]);

    const minVal = setup.cvt(bgs.reduce((p,c)=>(p&&p<c.sgv)?p:c.sgv));
    const minBorder = (!minVal || setup.lines[0] < minVal) ? setup.lines[0] : minVal;
    const lastPoint = bgs.reduce((p,c)=>(p&&p.datetime>c.datetime)?p:c);
    if (!lastPoint) {
      lastPoint = {datetime: nowTimestamp, sgv: null, direction: ""};
    }
    document.getElementById("{{chart_id}}-last").innerText = setup.cvt(lastPoint.sgv);
    document.getElementById("{{chart_id}}-dir").innerText = dir[lastPoint.direction||""] || "";
  
    const timeformatter = config.custom_fields_values.TIMESTAMP != "relative" ? undefined : function() {
      // Calculate time difference from the latest data point
      var hoursAgo = Math.round((lastPoint.datetime - this.value) / (60 * 60 * 1000));
      if (hoursAgo === 0) return "now";
      return "-" + hoursAgo + " hour" + (hoursAgo > 1 ? "s" : "");
    };
  
    document.getElementById("{{chart_id}}-units").innerText = setup.unit;

    console.log("minBorder", minBorder, "setup.lines[2]", setup.lines[2]);
    new Chartkick["LineChart"](
      "{{chart_id}}",
      data,
      {
        adapter: "highcharts", // chartjs, google, etc available
        points: true,
        colors: ["black"],
        curve: true,
        library: {
          chart: {
            height: {{height}}
          },
          plotOptions: {
            series: {
              threshold: null,
              softThreshold: true,
              animation: false,
              lineWidth: 4
            }
          },
          yAxis: {
            labels: {
              style: {
                fontSize: "16px",
                color:"#000000"
              }
            },
            min: minBorder,
            softMin: minBorder,
            softMax: setup.lines[2],
            startOnTick: false,
            plotLines: setup.lines.map((x)=>({value:x, width: 2, color:'#000'})),
            gridLineDashStyle: "shortdot",
            gridLineWidth: 1,
            gridLineColor: "#000000",
          },
          xAxis: {
            type: "datetime",
            dateTimeLabelFormats: { hour: "%H:%M", minute: "%H:%M", },
            labels: {
              formatter: timeformatter,
              style: {
                fontSize: "16px",
                color: "#000000"
              }
            },
            lineWidth: 0,
            gridLineDashStyle: "dot",
            tickWidth: 1,
            tickLength: 0,
            gridLineWidth: 1,
            gridLineColor: "#000000",
          }
        }
      }
    );
  };

  // ensure your chart loads before plugin render is generated
  if ("Chartkick" in window) {
    createChartGluck();
  } else {
    window.addEventListener("chartkick:load", createChartGluck, true);
  }
</script>

{% endtemplate %}