<!-- Chart Libraries -->
<script src="https://cdn.jsdelivr.net/npm/chartkick@5.0.1/dist/chartkick.min.js"></script>
<script src="https://usetrmnl.com/js/highcharts/12.3.0/highcharts.js"></script>

{% liquid
  # --- Liquid Logic ---
  assign current_time_adjusted = "now" | date: "%s"

  # Glucose Status Flags
  assign glucose_needs_attention = false
  assign glucose_accent_color = false
  assign glucose_status_text = "Stable"
  case merge_variables.glucose.status
    when "low", "high"
      assign glucose_needs_attention = true
      assign glucose_accent_color = true
      assign glucose_status_text = merge_variables.glucose.status | capitalize
    when "warning"
      assign glucose_needs_attention = true
      assign glucose_status_text = "Warning"
  endcase

  # Enhanced Glucose Trend Arrows
  assign trend_symbol = "•"
  # Map glucose direction to trend symbols
  case merge_variables.direction
    when "DoubleUp" then assign trend_symbol = "⇈"
    when "SingleUp" then assign trend_symbol = "↗"
    when "FortyFiveUp" then assign trend_symbol = "↑"
    when "Flat" then assign trend_symbol = "→"
    when "FortyFiveDown" then assign trend_symbol = "↓"
    when "SingleDown" then assign trend_symbol = "↘"
    when "DoubleDown" then assign trend_symbol = "⇊"
  endcase

  # Get glucose direction for chart
  assign chart_direction = merge_variables.direction | default: "Flat"
  assign chart_id = "glucose-bg-chart"
%}

<div class="dashboard-root">
  <div class="dashboard-grid">
    <!-- Left Column: Health Data -->
    <div class="dashboard-col">
      <!-- Time Display -->
      <div class="card card--time">
        <div class="time-main">{{ current_time_adjusted | date: "%-I:%M" }}<span class="time-period">{{ current_time_adjusted | date: "%P" }}</span></div>
        <div class="time-sub">{{ current_time_adjusted | date: "%A, %B %d" }}</div>
      </div>

      <!-- Weather Card -->
      <div class="card card--weather">
        <div class="data-row">
          <div class="icon-container">
            <div class="weather-icon" aria-hidden="true">
              {% assign desc = merge_variables.weather.condition.description | downcase %}
              {% if desc contains "sun" or desc contains "clear" %}☀
              {% elsif desc contains "cloud" %}☁
              {% elsif desc contains "rain" or desc contains "shower" %}🌧
              {% elsif desc contains "snow" %}❄
              {% else %}🌤{% endif %}
            </div>
          </div>
          <div class="data-details">
            <div class="temp-main">{{ merge_variables.weather.temperature.current | round }}°C</div>
            <div class="temp-sub">{{ merge_variables.weather.condition.description | capitalize }}</div>
            <div class="temp-meta">Feels {{ merge_variables.weather.temperature.feels_like | round }}° • {{ merge_variables.weather.humidity | round }}% Humidity</div>
          </div>
        </div>
      </div>

      <!-- Glucose Card with Background Chart -->
      <div class="card card--glucose glucose-with-chart {% if glucose_needs_attention %}card--glucose-alert{% endif %}">
        <!-- Background Chart Container -->
        <div class="glucose-chart-background" id="{{chart_id}}"></div>
        
        <!-- Glucose Content (foreground) -->
        <div class="data-row">
          <div class="icon-container">
            <div class="glucose-icon {% if glucose_accent_color %}glucose-icon--alert{% endif %}" aria-hidden="true">{{ trend_symbol }}</div>
          </div>
          <div class="data-details">
            <div class="glucose-main {% if glucose_accent_color %}text--accent{% endif %}">{{ merge_variables.sgv }} mmol/L</div>
            <div class="glucose-sub {% if glucose_accent_color %}text--accent{% endif %}">{{ glucose_status_text }}</div>
            <div class="glucose-meta">Updated: {{ merge_variables.glucose.timestamp | date: "%-I:%M %P" }}
              {% comment %}Delta not available in current data structure{% endcomment %}
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Right Column: Transport Departures -->
    <div class="dashboard-col">
      <!-- Transport Header -->
      <div class="card card--transport-header">
        <div class="transport-title">Next Departures</div>
        <div class="transport-location">{{ merge_variables.transport.location }}</div>
      </div>

      <!-- Departures List -->
      <div class="departures-list">
        {% if merge_variables.transport.departures.size > 0 %}
          {% for departure in merge_variables.transport.departures limit: 8 %}
            {% assign is_imminent = false %}
            {% if departure.mins_away <= 1 %}{% assign is_imminent = true %}{% endif %}

            <div class="departure-item {% cycle 'bg--white', 'bg--gray-10' %}">
              <div class="departure-route">
                <span class="route-badge {% if is_imminent %}route-badge--alert{% endif %}">{{ departure.route }}</span>
              </div>
              <div class="departure-info">
                <div class="departure-destination clamp--1">{{ departure.destination }}</div>
              </div>
              <div class="departure-timing">
                {% if is_imminent %}
                <div class="timing-main timing-main--alert">Now</div>
                {% else %}
                <div class="timing-main">{{ departure.mins_away | round }}m</div>
                {% endif %}
                {% if departure.delay and departure.delay > 0 %}
                <div class="timing-delay">+{{ departure.delay }}m</div>
                {% endif %}
              </div>
            </div>
            {% unless forloop.last %}
              <div class="departure-divider"></div>
            {% endunless %}
          {% endfor %}
        {% else %}
          <div class="card card--no-departures">
            <div class="no-departures-icon" aria-hidden="true">🚌</div>
            <div class="no-departures-text">No upcoming departures</div>
          </div>
        {% endif %}
      </div>

      <!-- Service Status (optional - only show if provided) -->
      {% if merge_variables.transport.service_status %}
        {% assign is_service_alert = false %}
        {% if merge_variables.transport.service_status contains 'delay' or merge_variables.transport.service_status contains 'cancel' %}
          {% assign is_service_alert = true %}
        {% endif %}
        <div class="card card--service-status {% if is_service_alert %}card--service-status-alert{% endif %}" role="status">
          <div class="service-status-text {% if is_service_alert %}text--accent{% endif %}">{{ merge_variables.transport.service_status }}</div>
        </div>
      {% endif %}
    </div>
  </div>
</div>

<!-- Glucose Background Chart Script -->
<script>
  // Make webhook data available to chart script
  window.merge_variables = {{ merge_variables | json }};
  
  var createGlucoseBackgroundChart = function() {
    // Only proceed if we have glucose data
    if (!window.merge_variables || !window.merge_variables.sgv) {
      console.log("No glucose data available for chart");
      return;
    }
    
    // Use top-level glucose properties from webhook
    const glucoseValue = parseFloat(window.merge_variables.sgv);
    const glucoseTime = new Date(window.merge_variables.datetime).getTime();
    const direction = window.merge_variables.direction || "Flat";
    
    // Convert glucose data to chart format
    const glucoseData = [];
    
    // Create 3 data points for a simple trend visualization
    for (let i = 2; i >= 0; i--) {
      const timeOffset = i * 30 * 60 * 1000; // 30 minutes apart
      const time = glucoseTime - timeOffset;
      
      // Simple trend simulation based on direction
      let trendValue = glucoseValue;
      if (direction === "SingleUp" || direction === "DoubleUp") {
        trendValue = trendValue - (i * 0.8); // was rising
      } else if (direction === "SingleDown" || direction === "DoubleDown") {
        trendValue = trendValue + (i * 0.8); // was falling
      } else if (direction === "FortyFiveUp") {
        trendValue = trendValue - (i * 0.4); // gentle rise
      } else if (direction === "FortyFiveDown") {
        trendValue = trendValue + (i * 0.4); // gentle fall
      }
      
      glucoseData.push({
        datetime: time,
        value: Math.max(trendValue, 2.0) // minimum reasonable value
      });
    }

    if (glucoseData.length === 0) {
      return; // No data to chart
    }

    // Chart setup for mmol/L
    const chartConfig = {
      thresholds: [4.0, 7.8, 10.0], // low, target, high thresholds
      unit: "mmol/L",
      formatValue: (x) => x ? (Math.round(x * 10) / 10) : x,
    };

    const data = glucoseData.map((x) => [x.datetime, chartConfig.formatValue(x.value)]);
    const minVal = chartConfig.formatValue(Math.min(...glucoseData.map(x => x.value)));
    const minBorder = (!minVal || chartConfig.thresholds[0] < minVal) ? chartConfig.thresholds[0] : minVal;

    // Create background chart with minimal styling
    new Chartkick.LineChart("{{chart_id}}", data, {
      adapter: "highcharts",
      points: false,
      colors: ["rgba(100, 150, 255, 0.3)"], // Light blue, semi-transparent
      curve: true,
      library: {
        chart: {
          height: 120,
          backgroundColor: 'transparent',
          style: {
            fontFamily: 'inherit'
          }
        },
        plotOptions: {
          series: {
            threshold: null,
            softThreshold: true,
            animation: false,
            lineWidth: 2,
            enableMouseTracking: false, // Disable hover effects
            states: {
              inactive: {
                opacity: 0.3
              }
            }
          }
        },
        tooltip: {
          enabled: false // Disable tooltips
        },
        yAxis: {
          labels: {
            enabled: false // Hide y-axis labels
          },
          min: minBorder,
          softMin: minBorder,
          softMax: chartConfig.thresholds[2],
          startOnTick: false,
          plotLines: [], // Remove threshold lines for cleaner background
          gridLineWidth: 0,
          lineWidth: 0,
          tickWidth: 0
        },
        xAxis: {
          type: "datetime",
          labels: {
            enabled: false // Hide x-axis labels
          },
          lineWidth: 0,
          tickWidth: 0,
          gridLineWidth: 0
        },
        legend: {
          enabled: false
        },
        credits: {
          enabled: false
        }
      }
    });
  };

  // Initialize chart when libraries are ready
  if (typeof window.Chartkick !== 'undefined') {
    createGlucoseBackgroundChart();
  } else {
    window.addEventListener("chartkick:load", createGlucoseBackgroundChart, true);
  }
</script>

<style>
  /* Small grey divider for each departure item */
  .departure-divider {
    height: 1px;
    width: 100%;
    background: #e5e7eb;
    margin: 0 0 0 72px;
    border: none;
  }

  /* --- OVERFLOW PREVENTION (working) --- */
  .dashboard-root {
    width: 100%;
    overflow-x: hidden;
    padding: 16px;
    box-sizing: border-box;
  }

  .dashboard-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 16px;
    min-height: 100vh;
  }
  
  .dashboard-col {
    display: flex;
    flex-direction: column;
    gap: 12px;
    min-width: 0;
    overflow: hidden;
  }

  /* --- GLUCOSE CHART BACKGROUND STYLES --- */
  .glucose-with-chart {
    position: relative;
    overflow: hidden;
  }

  .glucose-chart-background {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 1;
    opacity: 0.25;
    pointer-events: none; /* Prevent interaction with background chart */
  }

  .glucose-with-chart .data-row {
    position: relative;
    z-index: 2; /* Ensure text appears above chart */
  }

  /* Text outline for readability over chart background */
  .glucose-with-chart .glucose-main,
  .glucose-with-chart .glucose-sub,
  .glucose-with-chart .glucose-meta {
    text-shadow: 
      -1px -1px 0 #fff,
       1px -1px 0 #fff,
      -1px  1px 0 #fff,
       1px  1px 0 #fff,
       0 -1px 0 #fff,
       0  1px 0 #fff,
      -1px  0 0 #fff,
       1px  0 0 #fff;
  }

  /* --- REMOVED OUTLINES FROM TRANSPORT ITEMS (HERE'S THE FIX) --- */
  .departure-item {
    display: flex;
    align-items: center;
    min-height: 60px;
    padding: 12px;
    /* REMOVED: border: var(--border-width-thin) solid var(--color-black); */
    overflow: hidden;
  }
  
  /* Keep the alternating background for visual separation */
  .bg--white { background-color: #ffffff; }
  .bg--gray-10 {
    background-color: #f5f5f5;
    background-image: repeating-linear-gradient(45deg, transparent, transparent 1px, #ffffff 1px, #ffffff 2px);
  }

  /* --- TEXT ELEMENTS --- */
  .departure-destination {
    display: block;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    max-width: 100%;
  }

  /* --- FULL VISUAL STYLING (unchanged) --- */
  :root {
    --color-black: #000000;
    --color-white: #ffffff;
    --color-accent: #ff0000;
    --color-accent-light: #ffe6e6;

    --font-sans: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
    --font-size-large: 3.5rem;
    --font-size-medium: 2.5rem;
    --font-size-small: 1.2rem;
    --font-weight-bold: 700;
    --font-weight-medium: 500;

    --border-width-thick: 3px;
    --border-width-normal: 2px;
    --border-width-thin: 1px;
    --border-radius-card: 8px;
    --border-radius-badge: 6px;
  }

  * { 
    font-family: var(--font-sans) !important; 
    box-sizing: border-box; 
  }
  
  body { 
    margin: 0; 
    padding: 0; 
    background: #fff;
    min-height: 100vh;
  }
  
  .text--accent { color: var(--color-accent) !important; }
  .bg--white { background-color: var(--color-white); }
  .bg--accent-light { background-color: var(--color-accent-light); }

  /* --- Cards --- */
  .card {
    border-radius: var(--border-radius-card);
    border: var(--border-width-normal) solid var(--color-black);
    padding: 16px;
  }
  
  .card--time {
    background-color: var(--color-white);
    border-width: var(--border-width-thick);
    text-align: center;
  }
  
  .time-main {
    font-size: var(--font-size-large);
    font-weight: var(--font-weight-bold);
    line-height: 0.9;
    white-space: nowrap;
    overflow: hidden;
  }
  
  .time-period {
    font-size: 0.6em;
    margin-left: 0.2em;
    font-weight: var(--font-weight-medium);
  }
  
  .time-sub {
    margin-top: 8px;
    font-size: var(--font-size-small);
  }

  .card--weather, .card--glucose {
    background-color: #f5f5f5; /* bg--gray-10 */
  }
  
  .card--glucose-alert {
    border: var(--border-width-thick) solid var(--color-accent);
  }

  .data-row {
    display: flex;
    align-items: flex-start;
    gap: 12px;
  }
  
  .icon-container {
    flex-shrink: 0;
  }
  
  .weather-icon, .glucose-icon {
    width: 60px;
    height: 60px;
    border: var(--border-width-normal) solid var(--color-black);
    border-radius: var(--border-radius-card);
    background-color: var(--color-white);
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 2.5rem;
  }
  
  .glucose-icon {
    background-color: #d4d4d4; /* Similar to gray-30 */
  }
  
  .glucose-icon--alert {
    background-color: var(--color-accent);
    color: var(--color-white);
  }

  .data-details {
    flex: 1;
  }
  
  .temp-main, .glucose-main {
    font-size: var(--font-size-medium);
    font-weight: var(--font-weight-bold);
  }
  
  .temp-sub, .glucose-sub {
    font-size: 1rem;
  }
  
  .temp-meta, .glucose-meta {
    font-size: 0.875rem;
    margin-top: 4px;
  }

  .card--transport-header {
    background-color: #f5f5f5; /* bg--gray-10 */
  }
  
  .transport-title {
    font-weight: var(--font-weight-bold);
    font-size: 1.125rem;
  }
  
  .transport-location {
    font-size: 0.875rem;
    margin-top: 4px;
  }

  /* --- Departures List --- */
  .departures-list {
    display: flex;
    flex-direction: column;
    gap: 2px; /* This creates subtle spacing between items */
    flex: 1;
    min-height: 0;
    overflow-y: auto;
  }
  
  .departure-route {
    width: 60px;
    display: flex;
    justify-content: center;
  }
  
  .route-badge {
    display: inline-block;
    padding: 8px 12px;
    border-radius: var(--border-radius-badge);
    font-weight: var(--font-weight-bold);
    color: var(--color-white);
    background-color: var(--color-black);
    border: var(--border-width-normal) solid var(--color-black);
    min-width: 45px;
    text-align: center;
    font-size: 1rem;
  }
  
  .route-badge--alert {
    background-color: var(--color-accent);
  }

  .departure-info {
    flex: 1;
    padding: 0 12px;
    overflow: hidden;
  }
  
  .departure-destination {
    font-weight: var(--font-weight-medium);
    font-size: 1rem;
  }

  .departure-timing {
    width: 80px;
    text-align: right;
  }
  
  .timing-main {
    font-weight: var(--font-weight-bold);
    font-size: 1rem;
  }
  
  .timing-main--alert {
    color: var(--color-accent);
  }
  
  .timing-delay {
    font-size: 0.875rem;
    margin-top: 2px;
    color: var(--color-accent);
  }

  .card--no-departures {
    background-color: #f5f5f5; /* bg--gray-10 */
    flex: 1;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    text-align: center;
    border-width: var(--border-width-normal);
  }
  
  .no-departures-icon {
    font-size: 2rem;
    margin-bottom: 8px;
  }

  .card--service-status {
    background-color: #f5f5f5; /* bg--gray-10 */
    border: var(--border-width-thin) solid var(--color-black);
    padding: 12px;
    margin-top: 8px;
  }
  
  .card--service-status-alert {
    background-color: var(--color-accent-light);
    border: var(--border-width-normal) solid var(--color-accent);
  }
  
  .service-status-text {
    font-size: 0.875rem;
  }

  /* --- Utilities --- */
  .clamp--1 {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  /* --- Responsive --- */
  @media (max-width: 600px) {
    .dashboard-grid {
      grid-template-columns: 1fr;
      gap: 8px;
    }
    
    .time-main {
      font-size: 3rem;
    }
  }
  
  @media (max-width: 400px) {
    .time-main {
      font-size: 2.5rem;
    }
  }
  
  /* Shading classes */
  .bg--black { background-color: #000000; }
  .bg--gray-10 { background-color: #f5f5f5; }
  .bg--gray-15 { background-color: #ebebeb; }
  .bg--gray-20 { background-color: #e0e0e0; }
  .bg--gray-25 { background-color: #d6d6d6; }
  .bg--gray-30 { background-color: #cccccc; }
  .bg--gray-35 { background-color: #c2c2c2; }
  .bg--gray-40 { background-color: #b8b8b8; }
  .bg--gray-45 { background-color: #adadad; }
  .bg--gray-50 { background-color: #a3a3a3; }
  .bg--gray-55 { background-color: #999999; }
  .bg--gray-60 { background-color: #8f8f8f; }
  .bg--gray-65 { background-color: #858585; }
  .bg--gray-70 { background-color: #7a7a7a; }
  .bg--gray-75 { background-color: #707070; }
  .bg--white { background-color: #ffffff; }
</style>